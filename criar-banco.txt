-- Tables
CREATE TABLE Pais (
    idPais            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL
);

CREATE TABLE Genero (
    idGenero          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL
);

CREATE TABLE FaixaEtaria (
    idFaixaEtaria     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    classificacao      VARCHAR2(20)  NOT NULL,
    idadeMinima       NUMBER         NOT NULL
);

CREATE TABLE Diretor (
    idDiretor         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL,
    sexo              CHAR(1) CHECK (sexo IN ('M','F'))
);

CREATE TABLE Ator (
    idAtor            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL,
    sexo              CHAR(1) CHECK (sexo IN ('M','F'))
);

CREATE TABLE Personagem (
    idPersonagem      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL
);

CREATE TABLE Serie (
    idSerie           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo            VARCHAR2(200) NOT NULL,
    idGenero          NUMBER REFERENCES Genero(idGenero),
    idFaixaEtaria     NUMBER REFERENCES FaixaEtaria(idFaixaEtaria),
    idPaisOrigem      NUMBER REFERENCES Pais(idPais),
    anoLancamento     NUMBER,
    exibicaoAtiva     CHAR(1) DEFAULT 'S' CHECK (exibicaoAtiva IN ('S','N'))
);

CREATE TABLE Temporada (
    idTemporada       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    numeroTemporada   NUMBER NOT NULL,
    idSerie           NUMBER REFERENCES Serie(idSerie)
);

CREATE TABLE Episodio (
    idEpisodio        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo            VARCHAR2(200) NOT NULL,
    duracaoMin        NUMBER,
    idTemporada       NUMBER REFERENCES Temporada(idTemporada)
);

CREATE TABLE Filme (
    idFilme           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo            VARCHAR2(200) NOT NULL,
    duracaoMin        NUMBER,
    resolucao         VARCHAR2(20),
    idGenero          NUMBER REFERENCES Genero(idGenero),
    idFaixaEtaria     NUMBER REFERENCES FaixaEtaria(idFaixaEtaria),
    idPaisOrigem      NUMBER REFERENCES Pais(idPais),
    anoLancamento     NUMBER,
    exibicaoAtiva     CHAR(1) DEFAULT 'S' CHECK (exibicaoAtiva IN ('S','N'))
);

CREATE TABLE Interpretacao (
    idInterpretacao   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idAtor            NUMBER REFERENCES Ator(idAtor),
    idPersonagem      NUMBER REFERENCES Personagem(idPersonagem),
    idFilme           NUMBER,
    idSerie           NUMBER,
    CONSTRAINT chk_interp_obras CHECK ((idFilme IS NOT NULL AND idSerie IS NULL) OR (idSerie IS NOT NULL AND idFilme IS NULL)),
    FOREIGN KEY (idFilme) REFERENCES Filme(idFilme),
    FOREIGN KEY (idSerie) REFERENCES Serie(idSerie)
);

CREATE TABLE EpisodioAtor (
    idEpisodio        NUMBER REFERENCES Episodio(idEpisodio),
    idAtor            NUMBER REFERENCES Ator(idAtor),
    idPersonagem      NUMBER REFERENCES Personagem(idPersonagem),
    PRIMARY KEY (idEpisodio,idAtor)
);

CREATE TABLE EpisodioDiretor (
    idEpisodio        NUMBER REFERENCES Episodio(idEpisodio),
    idDiretor         NUMBER REFERENCES Diretor(idDiretor),
    PRIMARY KEY (idEpisodio,idDiretor)
);

CREATE TABLE FilmeDiretor (
    idFilme           NUMBER REFERENCES Filme(idFilme),
    idDiretor         NUMBER REFERENCES Diretor(idDiretor),
    PRIMARY KEY (idFilme,idDiretor)
);

CREATE TABLE Premiacao (
    idPremiacao       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome              VARCHAR2(100) NOT NULL,
    ano               NUMBER
);

CREATE TABLE PremiacaoAtor (
    idPremiacao       NUMBER REFERENCES Premiacao(idPremiacao) ON DELETE CASCADE,
    idAtor            NUMBER REFERENCES Ator(idAtor),
    idSerie           NUMBER REFERENCES Serie(idSerie),
    idTemporada       NUMBER REFERENCES Temporada(idTemporada),
    idFilme           NUMBER REFERENCES Filme(idFilme)
);

CREATE TABLE PremiacaoDiretor (
    idPremiacao       NUMBER REFERENCES Premiacao(idPremiacao) ON DELETE CASCADE,
    idDiretor         NUMBER REFERENCES Diretor(idDiretor),
    idFilme           NUMBER REFERENCES Filme(idFilme),
    idSerie           NUMBER REFERENCES Serie(idSerie)
);

CREATE TABLE PremiacaoObra (
    idPremiacao       NUMBER REFERENCES Premiacao(idPremiacao) ON DELETE CASCADE,
    idFilme           NUMBER,
    idSerie           NUMBER,
    CONSTRAINT chk_premio_obra CHECK ((idFilme IS NOT NULL AND idSerie IS NULL) OR (idSerie IS NOT NULL AND idFilme IS NULL)),
    FOREIGN KEY (idFilme) REFERENCES Filme(idFilme),
    FOREIGN KEY (idSerie) REFERENCES Serie(idSerie)
);

CREATE TABLE AvaliacaoEpisodio (
    idAvaliacao       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idEpisodio        NUMBER REFERENCES Episodio(idEpisodio),
    nota              NUMBER(3,1) CHECK (nota BETWEEN 0 AND 10)
);

CREATE TABLE AvaliacaoTemporada (
    idAvaliacao       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idTemporada       NUMBER REFERENCES Temporada(idTemporada),
    nota              NUMBER(3,1) CHECK (nota BETWEEN 0 AND 10)
);

CREATE TABLE AvaliacaoTitulo (
    idAvaliacao       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idFilme           NUMBER,
    idSerie           NUMBER,
    nota              NUMBER(3,1) CHECK (nota BETWEEN 0 AND 10),
    CONSTRAINT chk_aval_titulo CHECK ((idFilme IS NOT NULL AND idSerie IS NULL) OR (idSerie IS NOT NULL AND idFilme IS NULL)),
    FOREIGN KEY (idFilme) REFERENCES Filme(idFilme),
    FOREIGN KEY (idSerie) REFERENCES Serie(idSerie)
);
--------------------------------------------------------------------------------
-- Index

CREATE INDEX idx_ep_duracao ON Episodio(duracaoMin);
CREATE INDEX idx_filme_duracao ON Filme(duracaoMin);
--------------------------------------------------------------------------------
-- Trigger

CREATE OR REPLACE TRIGGER trg_filme_delete_premiacoes
BEFORE DELETE ON Filme
FOR EACH ROW
BEGIN
  DELETE FROM Premiacao
  WHERE idPremiacao IN (
        SELECT idPremiacao FROM PremiacaoObra      WHERE idFilme = :OLD.idFilme
        UNION ALL
        SELECT idPremiacao FROM PremiacaoAtor      WHERE idFilme = :OLD.idFilme
        UNION ALL
        SELECT idPremiacao FROM PremiacaoDiretor   WHERE idFilme = :OLD.idFilme
  );
END;
/

CREATE OR REPLACE TRIGGER trg_serie_delete_premiacoes
BEFORE DELETE ON Serie
FOR EACH ROW
BEGIN
  DELETE FROM Premiacao
  WHERE idPremiacao IN (
        SELECT idPremiacao FROM PremiacaoObra      WHERE idSerie = :OLD.idSerie
        UNION ALL
        SELECT idPremiacao FROM PremiacaoAtor      WHERE idSerie = :OLD.idSerie
        UNION ALL
        SELECT idPremiacao FROM PremiacaoDiretor   WHERE idSerie = :OLD.idSerie
  );
END;
/
--------------------------------------------------------------------------------
--Procedure

CREATE OR REPLACE PROCEDURE pr_inativar_obras_pais (
    p_idPais IN Pais.idPais%TYPE
) AS
BEGIN
    UPDATE Filme
       SET exibicaoAtiva = 'N'
     WHERE idPaisOrigem = p_idPais
       AND exibicaoAtiva <> 'N';

    UPDATE Serie
       SET exibicaoAtiva = 'N'
     WHERE idPaisOrigem = p_idPais
       AND exibicaoAtiva <> 'N';

    COMMIT;
END;
/
SHOW ERRORS
--------------------------------------------------------------------------------
--funtion

CREATE OR REPLACE FUNCTION fn_total_premiacoes_filme (
    p_idFilme IN NUMBER
) RETURN NUMBER
IS
    v_total NUMBER;
BEGIN
    SELECT  NVL((SELECT COUNT(*) FROM PremiacaoAtor    WHERE idFilme = p_idFilme),0)
          + NVL((SELECT COUNT(*) FROM PremiacaoDiretor WHERE idFilme = p_idFilme),0)
          + NVL((SELECT COUNT(*) FROM PremiacaoObra    WHERE idFilme = p_idFilme),0)
    INTO   v_total
    FROM   dual;

    RETURN v_total;
END;
/
SHOW ERRORS
--------------------------------------------------------------------------------
